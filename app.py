# app.py
import asyncio
import random
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import InlineKeyboardBuilder
from settings import TELEGRAM_TOKEN, CHANNEL_URL

from settings import TELEGRAM_TOKEN
from packs_loader import load_packs
from quiz_engine import QuizEngine

# –ó–∞–≥—Ä—É–∂–∞–µ–º YAML-–ø–∞–∫–µ—Ç—ã –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
packs = load_packs("data/packs")
engine = QuizEngine(packs)


def build_levels_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è."""
    kb = InlineKeyboardBuilder()
    kb.button(text="üê£ –î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö", callback_data="level:junior")
    kb.button(text="üöÄ –î–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö", callback_data="level:advanced")
    kb.button(text="üé≤ –†–∞–Ω–¥–æ–º", callback_data="level:random")
    kb.adjust(1)
    return kb.as_markup()

def build_post_results_kb(channel_url: str):
    kb = InlineKeyboardBuilder()
    kb.button(text="üß™ –ö–≤–∏–∑", callback_data="menu:quiz")
    kb.button(text="üß† QA Mind", url=channel_url)  # –≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞
    kb.adjust(2)
    return kb.as_markup()


def pick_random_pack(levels: list[str]) -> str | None:
    """–í–µ—Ä–Ω—É—Ç—å –∫–æ–¥ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞, —á–µ–π pack.level –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ levels."""
    candidates = [code for code, data in packs.items() if data["pack"].get("level") in levels]
    return random.choice(candidates) if candidates else None


async def main():
    bot = Bot(
        token=TELEGRAM_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN),
    )
    dp = Dispatcher()

    # üëâ –ê–≤—Ç–æ-—Å–±—Ä–æ—Å –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º long polling
    try:
        # drop_pending_updates=True –æ—á–∏—Å—Ç–∏—Ç –æ—á–µ—Ä–µ–¥—å –∞–ø–¥–µ–π—Ç–æ–≤, –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é –¥–ª—è –≤–µ–±—Ö—É–∫–∞
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception as e:
        # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ –∑–∞–ª–æ–≥–∏—Ä—É–µ–º
        print(f"[warn] delete_webhook failed: {e}")

    # /start ‚Äî —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
    @dp.message(F.text == "/start")
    async def cmd_start(m: Message):
        if not packs:
            await m.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ ü§ñ \n –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å.")
            return
        await m.answer("–ö–æ–ª–ª–µ–≥–∞, –ø—Ä–∏–≤–µ—Ç!üëã\n\nüßë‚Äçüíª –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –¥–ª—è —Å–µ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –Ω–∞ QA?\nüéì –¢–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤. \nüìä –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=build_levels_kb())

    # –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è: —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—É–Ω–¥
    @dp.callback_query(F.data.startswith("level:"))
    async def choose_level(c: CallbackQuery):
        level = c.data.split(":", 1)[1]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ –ø–∞–∫–µ—Ç–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —É—Ä–æ–≤–Ω—é
        if level == "random":
            code = random.choice(list(packs.keys())) if packs else None
        elif level == "junior":
            code = pick_random_pack(["junior"])
        elif level == "advanced":
            code = pick_random_pack(["advanced"])
        else:
            code = None  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

        if not code:
            await c.message.answer("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ üôÉ –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: /start")
            await c.answer()
            return

        # –°—Ç–∞—Ä—Ç—É–µ–º —Å–µ—Å—Å–∏—é (–≤–Ω—É—Ç—Ä–∏ –≤—ã–±–µ—Ä–µ—Ç—Å—è 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤)
        engine.start_session(c.from_user.id, code)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞
        q = engine.get_current(c.from_user.id)
        await c.message.answer(engine.render_question(q))
        await c.answer()

    # –î–µ–∂—É—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    @dp.message(F.text == "/cancel")
    async def cancel(m: Message):
        engine.sessions.pop(m.from_user.id, None)
        await m.answer("–°–µ—Å—Å–∏—é –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

    @dp.message(F.text == "/startover")
    async def startover(m: Message):
        engine.sessions.pop(m.from_user.id, None)
        await m.answer("–û–∫, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ ‚öíÔ∏è. –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=build_levels_kb())

    @dp.callback_query(F.data == "menu:quiz")
    async def open_quiz_menu(c: CallbackQuery):
        await c.message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=build_levels_kb())
        await c.answer()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    @dp.message()
    async def any_text(m: Message):
        if not engine.has_active(m.from_user.id):
            await m.answer("üß© –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å: /start")
            return
        res = engine.check(m.from_user.id, m.text or "")
        await m.answer(res["feedback"])
        if res["done"]:
            await m.answer(res["summary"])
            # —Å—Ç–∏–∫–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ). –í quiz_engine –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤—è—Ç—Å—è.
            sticker_id = res.get("sticker_id")
            if sticker_id:
                await m.answer_sticker(sticker_id)
            await m.answer(
                "–ü—Ä–æ–¥–æ–ª–∂–∏–º? üëá",
                reply_markup=build_post_results_kb(CHANNEL_URL)
            )
        else:
            await m.answer(engine.render_question(res["next"]))

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
