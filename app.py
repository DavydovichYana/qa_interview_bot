# app.py
import asyncio
import random
from typing import Dict, Set

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums.parse_mode import ParseMode

from settings import TELEGRAM_TOKEN, CHANNEL_URL, ADMIN_IDS, ENV
from packs_loader import load_packs
from quiz_engine import QuizEngine

# –ó–∞–≥—Ä—É–∂–∞–µ–º YAML-–ø–∞–∫–µ—Ç—ã –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
packs = load_packs("data/packs")
engine = QuizEngine(packs)

# –ë—É—Ñ–µ—Ä –¥–ª—è –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä–∞: user_id -> set –±—É–∫–≤ ('a','b',...)
MULTI_BUF: Dict[int, Set[str]] = {}

def is_admin(user_id: int) -> bool:
    try:
        return int(user_id) in set(int(x) for x in ADMIN_IDS)
    except Exception:
        return False

def build_levels_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è."""
    kb = InlineKeyboardBuilder()
    kb.button(text="üê£ –î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö", callback_data="level:junior")
    kb.button(text="üöÄ –î–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö", callback_data="level:advanced")
    kb.button(text="üé≤ –†–∞–Ω–¥–æ–º", callback_data="level:random")
    kb.adjust(1)
    return kb.as_markup()

def build_post_results_kb(channel_url: str):
    kb = InlineKeyboardBuilder()
    kb.button(text="üß™ –ö–≤–∏–∑", callback_data="menu:quiz")
    kb.button(text="üß† QA Mind", url=channel_url)  # –≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞
    kb.adjust(2)
    return kb.as_markup()

def pick_random_pack(levels: list[str]) -> str | None:
    """–í–µ—Ä–Ω—É—Ç—å –∫–æ–¥ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞, —á–µ–π pack.level –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ levels."""
    candidates = [code for code, data in packs.items() if data["pack"].get("level") in levels]
    return random.choice(candidates) if candidates else None

def build_mixed_pack(levels=("junior", "advanced")) -> dict:
    """–°–æ–±—Ä–∞—Ç—å –µ–¥–∏–Ω—ã–π '—Å–º–µ—à–∞–Ω–Ω—ã–π' –ø–∞–∫–µ—Ç –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π."""
    mixed_questions = []
    for _, data in packs.items():
        if data.get("pack", {}).get("level") in levels:
            mixed_questions.extend(data.get("questions", []))
    random.shuffle(mixed_questions)
    return {
        "pack": {
            "code": "mixed",
            "title": "–°–º–µ—à–∞–Ω–Ω—ã–π",
            "level": "mixed",
            "description": "–í–æ–ø—Ä–æ—Å—ã –≤–ø–µ—Ä–µ–º–µ—à–∫—É –∏–∑ junior –∏ advanced",
        },
        "questions": mixed_questions,
    }

# === –ù–û–í–û–ï: –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ—Ç–≤–µ—Ç–∞–º–∏ ===
def build_single_kb(q: dict):
    kb = InlineKeyboardBuilder()
    for letter, _ in q["options"].items():
        kb.button(text=f"{letter.upper()}", callback_data=f"ans:{letter}")
    kb.adjust(4)  # –∫—Ä–∞—Å–∏–≤–æ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –ø–æ 4 –∫–Ω–æ–ø–∫–∏ (–∏–ª–∏ —É–±–µ—Ä–∏)
    return kb.as_markup()

def build_multi_kb(q: dict, selected: Set[str] | None):
    selected = selected or set()
    kb = InlineKeyboardBuilder()
    # –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞: "‚òëÔ∏è A" / "‚ñ´Ô∏è A"
    for letter, _ in q["options"].items():
        mark = "‚òëÔ∏è" if letter in selected else "‚ñ´Ô∏è"
        kb.button(text=f"{mark} {letter.upper()}", callback_data=f"toggle:{letter}")
    kb.adjust(4)  # 4 –≤ —Ä—è–¥ (A B C D)

    # –Ω–∏–∂–Ω–∏–π —Ä—è–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    kb.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="multi:submit")
    kb.button(text="‚ôªÔ∏è –°–±—Ä–æ—Å", callback_data="multi:reset")
    kb.adjust(4, 2)  # –ø–µ—Ä–≤—ã–π —Ä—è–¥ 4, –≤—Ç–æ—Ä–æ–π —Ä—è–¥ 2
    return kb.as_markup()

async def send_question(chat_id: int, user_id: int, message_to_edit: Message | None = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç (–∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç) —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º."""
    q = engine.get_current(user_id)

    # –ø—Ä–æ–≥—Ä–µ—Å—Å: —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å (0-based) + 1 / –≤—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    s = engine.sessions[user_id]
    curr = s["idx"] + 1
    total = len(s["questions"])

    text = f"*–í–æ–ø—Ä–æ—Å {curr}/{total}*\n" + engine.render_question(q)

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    if q["type"] == "single":
        markup = build_single_kb(q)
    elif q["type"] == "multi":
        MULTI_BUF.setdefault(user_id, set())
        markup = build_multi_kb(q, MULTI_BUF[user_id])
    else:
        markup = None  # free

    if message_to_edit:
        try:
            await message_to_edit.edit_text(text, reply_markup=markup)
            return
        except Exception:
            pass
    await bot.send_message(chat_id, text, reply_markup=markup)

async def _remove_keyboard_safe(msg: Message):
    try:
        await msg.edit_reply_markup(reply_markup=None)
    except Exception:
        # –£–∂–µ —É–±—Ä–∞–ª–∏/—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        pass

async def handle_result(m: Message, user_id: int, res: dict):
    """–ï–¥–∏–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ engine.check(...)."""
    await m.answer(res["feedback"])
    if res["done"]:
        await m.answer(res["summary"])
        sticker_id = res.get("sticker_id")
        if sticker_id:
            await m.answer_sticker(sticker_id)
        await m.answer("–ü—Ä–æ–¥–æ–ª–∂–∏–º? üëá", reply_markup=build_post_results_kb(CHANNEL_URL))
    else:
        await send_question(m.chat.id, user_id)

def render_answered_question(q: dict, user_answers: list[str], curr: int, total: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –ø–æ–º–µ—Ç–∫–∞–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."""
    correct = set(a.lower() for a in (q["answer"] if isinstance(q["answer"], list) else [q["answer"]]))
    user = set(a.lower() for a in user_answers)

    lines = [f"*–í–æ–ø—Ä–æ—Å {curr}/{total}*", f"üîé *Q:* {q['text']}\n"]
    for letter, text in q["options"].items():
        if letter in correct and letter in user:
            mark = "‚úÖ"
        elif letter in correct:
            mark = "‚úÖ"
        elif letter in user:
            mark = "‚ùå"
        else:
            mark = "‚ñ´Ô∏è"
        lines.append(f"{mark} {letter.upper()}) {text}")
    return "\n".join(lines)

# === aiogram runtime ===
bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN),
)
dp = Dispatcher()

async def main():
    # üëâ –ê–≤—Ç–æ-—Å–±—Ä–æ—Å –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º long polling
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception as e:
        print(f"[warn] delete_webhook failed: {e}")

    # /start ‚Äî —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
    @dp.message(F.text == "/start")
    async def cmd_start(m: Message):
        if not packs:
            await m.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ ü§ñ \n –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å.")
            return
        await m.answer(
            "–ö–æ–ª–ª–µ–≥–∞, –ø—Ä–∏–≤–µ—Ç!üëã\n\nüßë‚Äçüíª –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –¥–ª—è —Å–µ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –Ω–∞ QA?\n"
            "üéì –¢–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤. \nüìä –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:",
            reply_markup=build_levels_kb()
        )

    # /version ‚Äî —É–∑–Ω–∞–µ–º —Å—Ä–µ–¥—É: –ø—Ä–æ–¥ –∏–ª–∏ stage
    @dp.message(F.text == "/version")
    async def version(m: Message):
        if is_admin(m.from_user.id):
            await m.answer(f"ü§ñ –û–∫—Ä—É–∂–µ–Ω–∏–µ: *{ENV}* (–∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º)", parse_mode=ParseMode.MARKDOWN)
        else:
            await m.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ")

    # –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è: —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—É–Ω–¥
    @dp.callback_query(F.data.startswith("level:"))
    async def choose_level(c: CallbackQuery):
        level = c.data.split(":", 1)[1]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ –ø–∞–∫–µ—Ç–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —É—Ä–æ–≤–Ω—é
        if level == "random":
            packs["mixed"] = build_mixed_pack(("junior", "advanced"))
            engine.packs = packs
            code = "mixed"
        elif level == "junior":
            code = pick_random_pack(["junior"])
        elif level == "advanced":
            code = pick_random_pack(["advanced"])
        else:
            code = None

        if not code:
            await c.message.answer("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ üôÉ –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: /start")
            await c.answer()
            return

        # –°—Ç–∞—Ä—Ç—É–µ–º —Å–µ—Å—Å–∏—é (–≤–Ω—É—Ç—Ä–∏ –≤—ã–±–µ—Ä–µ—Ç—Å—è 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤)
        engine.start_session(c.from_user.id, code)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        await send_question(c.message.chat.id, c.from_user.id)
        await c.answer()

    # –î–µ–∂—É—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    @dp.message(F.text == "/cancel")
    async def cancel(m: Message):
        engine.sessions.pop(m.from_user.id, None)
        MULTI_BUF.pop(m.from_user.id, None)
        await m.answer("–°–µ—Å—Å–∏—é –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

    @dp.message(F.text == "/startover")
    async def startover(m: Message):
        engine.sessions.pop(m.from_user.id, None)
        MULTI_BUF.pop(m.from_user.id, None)
        await m.answer("–û–∫, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ ‚öíÔ∏è. –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å:", reply_markup=build_levels_kb())

    @dp.callback_query(F.data == "menu:quiz")
    async def open_quiz_menu(c: CallbackQuery):
        await c.message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=build_levels_kb())
        await c.answer()

    # === –ù–û–í–û–ï: –æ—Ç–≤–µ—Ç—ã –∫–Ω–æ–ø–∫–∞–º–∏ ===
    @dp.callback_query(F.data.startswith("ans:"))
    async def on_single_answer(c: CallbackQuery):
        if not engine.has_active(c.from_user.id):
            await c.answer();
            return

        letter = c.data.split(":", 1)[1]
        # –ë–µ—Ä—ë–º –≤–æ–ø—Ä–æ—Å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –î–û –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
        q = engine.get_current(c.from_user.id)
        s = engine.sessions[c.from_user.id]
        curr = s["idx"] + 1
        total = len(s["questions"])

        res = engine.check(c.from_user.id, letter)

        try:
            await c.message.edit_text(render_answered_question(q, [letter], curr, total))
        except Exception:
            pass

        MULTI_BUF.pop(c.from_user.id, None)
        await handle_result(c.message, c.from_user.id, res)
        await c.answer("–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç")

    @dp.callback_query(F.data.startswith("toggle:"))
    async def on_multi_toggle(c: CallbackQuery):
        if not engine.has_active(c.from_user.id):
            await c.answer()
            return
        letter = c.data.split(":", 1)[1]
        sel = MULTI_BUF.setdefault(c.from_user.id, set())
        if letter in sel:
            sel.remove(letter)
        else:
            sel.add(letter)

        q = engine.get_current(c.from_user.id)
        await c.message.edit_reply_markup(reply_markup=build_multi_kb(q, sel))
        await c.answer()

    @dp.callback_query(F.data == "multi:reset")
    async def on_multi_reset(c: CallbackQuery):
        if not engine.has_active(c.from_user.id):
            await c.answer();
            return
        MULTI_BUF[c.from_user.id] = set()
        q = engine.get_current(c.from_user.id)
        await c.message.edit_reply_markup(reply_markup=build_multi_kb(q, MULTI_BUF[c.from_user.id]))
        await c.answer("–°–±—Ä–æ—à–µ–Ω–æ")

    @dp.callback_query(F.data == "multi:submit")
    async def on_multi_submit(c: CallbackQuery):
        if not engine.has_active(c.from_user.id):
            await c.answer();
            return

        sel = sorted(MULTI_BUF.get(c.from_user.id, set()))
        q = engine.get_current(c.from_user.id)
        s = engine.sessions[c.from_user.id]
        curr = s["idx"] + 1
        total = len(s["questions"])

        res = engine.check(c.from_user.id, ",".join(sel))

        try:
            await c.message.edit_text(render_answered_question(q, sel, curr, total))
        except Exception:
            pass

        MULTI_BUF.pop(c.from_user.id, None)
        await handle_result(c.message, c.from_user.id, res)
        await c.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    # === –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã: —Ç–æ–ª—å–∫–æ –¥–ª—è free ===
    @dp.message()
    async def any_text(m: Message):
        if not engine.has_active(m.from_user.id):
            await m.answer("üß© –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å: /start")
            return

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ù–ï free, –ø—Ä–æ—Å–∏–º –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É
        q = engine.get_current(m.from_user.id)
        if q["type"] != "free":
            await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –Ω–∏–∂–µ üëá")
            return

        # free ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç
        res = engine.check(m.from_user.id, m.text or "")
        await handle_result(m, m.from_user.id, res)

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
