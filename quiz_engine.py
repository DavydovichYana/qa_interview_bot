from typing import Dict, Any, Tuple, List
import re
from tags_map_loader import load_tags_map, render_tags
TAGS_MAP = load_tags_map()

def _norm(s: str) -> str:
    return (s or "").strip().lower()

def _split_letters(s: str) -> List[str]:
    parts = re.split(r"[,\s;]+", (s or "").strip())
    return [p.lower() for p in parts if p]

def _format_correct_answer(q: Dict[str, Any]) -> str:
    """–í–µ—Ä–Ω—ë–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–¥–ª—è single/multi/free)."""
    t = q["type"]
    if t in ("single", "multi"):
        ans = q["answer"]
        if isinstance(ans, str):
            ans = [ans]
        # —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º –±—É–∫–≤—ã —Å —Ç–µ–∫—Å—Ç–∞–º–∏
        opts = q.get("options", {})
        pairs = [f"{a}) {opts.get(a, '')}" for a in ans]
        return ", ".join(pairs)
    # free ‚Äî –ø–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    first = q.get("answer", [])
    if isinstance(first, list) and first:
        return first[0]
    if isinstance(first, str):
        return first
    return ""

class QuizEngine:
    def __init__(self, packs: Dict[str, Any]):
        self.packs = packs
        self.sessions: Dict[int, Dict[str, Any]] = {}  # user_id -> session

    def start_session(self, user_id: int, pack_code: str) -> None:
        pack = self.packs[pack_code]
        from packs_loader import pick_questions
        questions = pick_questions(pack, n=10)
        self.sessions[user_id] = {
            "questions": questions,
            "idx": 0,
            "score": 0.0,              # –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–π –∑–∞—á—ë—Ç
            "correct_count": 0,        # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–µ—Ä–Ω—ã—Ö
            "errors_by_tag": {},
            "wrong_items": [],         # —Å–ø–∏—Å–æ–∫ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
            "done": False,
        }

    def has_active(self, user_id: int) -> bool:
        s = self.sessions.get(user_id)
        return bool(s and not s.get("done"))

    def get_current(self, user_id: int) -> Dict[str, Any]:
        s = self.sessions[user_id]
        return s["questions"][s["idx"]]

    def render_question(self, q: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å: —Å–º–∞–π–ª —É Q, –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏, –∂–∏—Ä–Ω—ã–µ –±—É–∫–≤—ã."""
        t = q["type"]
        header = f"üîé *Q:* {q['text']}"
        if t in ("single", "multi"):
            # –∂–∏—Ä–Ω—ã–µ –±—É–∫–≤—ã a/b/c/d
            opts = "\n".join([f"**{k})** {v}" for k, v in q["options"].items()])
            hint = "_–û–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç_" if t == "single" else "_–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤_"
            return f"{header}\n\n{opts}\n\n{hint}"
        return f"{header}\n\n_–°–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç_"

    def _score_single(self, q: Dict[str, Any], answer_text: str) -> Tuple[float, bool]:
        ok = _norm(answer_text) == _norm(q["answer"])
        return (1.0 if ok else 0.0, ok)

    def _score_multi(self, q: Dict[str, Any], answer_text: str) -> Tuple[float, bool]:
        correct = set(_norm(x) for x in q["answer"])
        user = set(_split_letters(answer_text))
        if not user:
            return (0.0, False)
        if user == correct:
            return (1.0, True)
        # —á–∞—Å—Ç–∏—á–Ω—ã–π –∑–∞—á—ë—Ç
        precision = len(user & correct) / len(correct)
        wrong_penalty = len(user - correct) / max(1, len(correct))
        partial = max(0.0, precision - 0.3 * wrong_penalty)
        return (round(partial, 2), False)

    def _score_free(self, q: Dict[str, Any], answer_text: str) -> Tuple[float, bool]:
        user = _norm(answer_text)
        if not user:
            return (0.0, False)
        variants = [_norm(v) for v in q.get("answer", [])]
        if user in variants:
            return (1.0, True)
        for v in variants:
            words = [w for w in v.split() if w]
            if words and all(w in user for w in words):
                return (1.0, True)
        return (0.0, False)

    def _encouragement(self, correct: int, total: int) -> Dict[str, str]:
        """
        –ü–æ–¥–±–∏—Ä–∞–µ–º –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ç–µ–∫—Å—Ç –∏ —Å—Ç–∏–∫–µ—Ä –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É:
        0-3, 4-6, 7-8, 9-10. –°—Ç–∏–∫–µ—Ä—ã –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–∏ file_id.
        """
        ranges = [
            {"min": 0, "max": 3, "text": "–¢–µ–±–µ –Ω–∞–¥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–æ–π—Ç–∏ –∫ –∏–∑—É—á–µ–Ω–∏—é —Ç–µ–æ—Ä–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –±–∞–∑–æ–≤—ã—Ö —Ç–µ–º! üí™üìö", "sticker": "CAACAgIAAxkBAAERxAVoruSaNwdfSIynm8NFln8UDZsKJQACyTQAAxS5Sqpht736pBnMNgQ"},  # üîÅ –ø–æ–¥—Å—Ç–∞–≤—å file_id
            {"min": 4, "max": 6, "text": "–ù–µ–ø–ª–æ—Ö–æ! –ë–∞–∑–∞ –µ—Å—Ç—å, –Ω–æ –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏. –î–æ–±—å—ë–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–∫–∞—á–∞–µ–º—Å—è –Ω–∞ –∑–∞–¥–∞—á–∞—Ö –ø–æ—Å–ª–æ–∂–Ω–µ–µ üöÄ", "sticker": "CAACAgIAAxkBAAERxAloruS951hk2J97bezr_ps4s-d_eQACoy8AAhKPuEoGYuyE0fo69TYE"},
            {"min": 7, "max": 8, "text": "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í–∏–¥–Ω–æ, —á—Ç–æ —Ç—ã —Ö–æ—Ä–æ—à–æ –≤–ª–∞–¥–µ–µ—à—å –±–∞–∑–æ–π. –ß—É—Ç—å –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ - –∏ –±—É–¥–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã 10/10! üî•", "sticker": "CAACAgIAAxkBAAERw-xoruN9Kf9UUQdv3ZHkFYCnchd8nwACazEAArDOuUpGWRrkBQc6UTYE"},
            {"min": 9, "max": 10, "text": "–í–∞—É! –¢–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç - –±—É–¥—å —É–≤–µ—Ä–µ–Ω, –≤ —Ç–µ–æ—Ä–∏–∏ —Ç–µ–±–µ –Ω–µ—Ç —Ä–∞–≤–Ω—ã—Ö üèÜ", "sticker": "CAACAgIAAxkBAAERw-horuNhMmhqUdkOs-AclZbmMyzMAgAC_zkAAmpPuUrklarETKG26DYE"},
        ]
        for r in ranges:
            if r["min"] <= correct <= r["max"]:
                return {"text": r["text"], "sticker": r["sticker"]}
        return {"text": "", "sticker": ""}

    def check(self, user_id: int, answer_text: str) -> Dict[str, Any]:
        s = self.sessions[user_id]
        q = s["questions"][s["idx"]]
        qtype = q["type"]

        if qtype == "single":
            add, ok = self._score_single(q, answer_text)
        elif qtype == "multi":
            add, ok = self._score_multi(q, answer_text)
        else:
            add, ok = self._score_free(q, answer_text)

        s["score"] += add
        if ok:
            s["correct_count"] += 1
        else:
            # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ + –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            for tag in q.get("tags", []):
                s["errors_by_tag"][tag] = s["errors_by_tag"].get(tag, 0) + 1
            s["wrong_items"].append({
                "text": q["text"],
                "correct": _format_correct_answer(q),
                "explanation": q.get("explanation", "")
            })

        feedback = f"{'‚úÖ –í–µ—Ä–Ω–æ' if ok else '‚ùå –ù–µ–≤–µ—Ä–Ω–æ'} (+{add:.2f})\n‚ÑπÔ∏è {q.get('explanation','')}"
        s["idx"] += 1

        if s["idx"] >= len(s["questions"]):
            s["done"] = True
            total = len(s["questions"])
            correct = s["correct_count"]
            pct = round(100 * correct / total)
            # –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏—Ç–æ–≥–æ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞
            header = f"üèÅ *–ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:* {correct}/{total} ({pct}%)"
            # –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ç–µ–∫—Å—Ç
            mood = self._encouragement(correct, total)
            mood_text = mood["text"]
            sticker_id = mood["sticker"]

            # —Ç–æ–ø-3 –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–µ–≥–∞ (–æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –ø–æ–¥—Å–∫–∞–∑–∫—É)
            hardest = sorted(s["errors_by_tag"].items(), key=lambda kv: kv[1], reverse=True)[:7]
            raw_tags = [t for t, _ in hardest]
            topics_line = f"*‚ùóÔ∏è–¢–µ–º—ã –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏*: {render_tags(raw_tags, TAGS_MAP)}"

            # —Å–ø–∏—Å–æ–∫ –Ω–µ–≤–µ—Ä–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
            if s["wrong_items"]:
                lines = ["\n*üëá –û—à–∏–±–∫–∏:*"]
                for i, item in enumerate(s["wrong_items"], 1):
                    right = f" `{item['correct']}`" if item["correct"] else "‚Äî"
                    expl = f"\n   _{item['explanation']}_ " if item["explanation"] else ""
                    # –¥–æ–±–∞–≤–ª—è–µ–º \n –≤ –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –±—ã–ª –æ—Ç—Å—Ç—É–ø
                    lines.append(f"*{i}) {item['text']}*\n   *üëâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ:* {right}{expl}\n")
                mistakes_md = "\n".join(lines)
            else:
                mistakes_md = ""

            summary = "\n".join([header, topics_line, "", mood_text, mistakes_md]).strip()
            return {"feedback": feedback, "done": True, "summary": summary, "sticker_id": sticker_id}

        # –µ—â—ë –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã
        return {"feedback": feedback, "done": False, "next": s["questions"][s["idx"]]}
